{
  "providerProfiles": {
    "currentApiConfigName": "google",
    "apiConfigs": {
      "claude": {
        "apiModelId": "claude-3-7-sonnet-20250219",
        "apiKey": "",
        "apiProvider": "anthropic",
        "id": "nd0hxo3kp6r"
      },
      "google": {
        "apiModelId": "gemini-2.5-flash-preview-05-20",
        "geminiApiKey": "",
        "apiProvider": "gemini",
        "id": "ep2uj9nha8b"
      }
    },
    "modeApiConfigs": {
      "code": "ep2uj9nha8b",
      "architect": "ep2uj9nha8b",
      "ask": "ep2uj9nha8b",
      "debug": "ep2uj9nha8b",
      "orchestrator": "ep2uj9nha8b",
      "senior-reviewer": "ep2uj9nha8b",
      "think": "ep2uj9nha8b"
    },
    "migrations": {
      "rateLimitSecondsMigrated": true,
      "diffSettingsMigrated": true,
      "openAiHeadersMigrated": true
    }
  },
  "globalSettings": {
    "lastShownAnnouncementId": "may-29-2025-3-19",
    "condensingApiConfigId": "",
    "customCondensingPrompt": "",
    "autoApprovalEnabled": true,
    "alwaysAllowReadOnly": true,
    "alwaysAllowReadOnlyOutsideWorkspace": false,
    "alwaysAllowWrite": false,
    "alwaysAllowWriteOutsideWorkspace": false,
    "writeDelayMs": 1000,
    "alwaysAllowBrowser": true,
    "alwaysApproveResubmit": false,
    "requestDelaySeconds": 10,
    "alwaysAllowMcp": false,
    "alwaysAllowModeSwitch": true,
    "alwaysAllowSubtasks": false,
    "alwaysAllowExecute": true,
    "allowedCommands": [
      "npm test",
      "npm install",
      "tsc",
      "git log",
      "git diff",
      "git show",
      "uv run pytest",
      "pytest"
    ],
    "autoCondenseContext": true,
    "autoCondenseContextPercent": 100,
    "maxConcurrentFileReads": 1,
    "browserToolEnabled": true,
    "browserViewportSize": "900x600",
    "screenshotQuality": 75,
    "remoteBrowserEnabled": false,
    "enableCheckpoints": true,
    "ttsEnabled": false,
    "ttsSpeed": 1,
    "soundEnabled": false,
    "soundVolume": 0.5,
    "maxOpenTabsContext": 20,
    "maxWorkspaceFiles": 200,
    "showRooIgnoredFiles": true,
    "maxReadFileLine": -1,
    "terminalOutputLineLimit": 500,
    "terminalShellIntegrationTimeout": 5000,
    "terminalShellIntegrationDisabled": false,
    "terminalCommandDelay": 0,
    "terminalPowershellCounter": false,
    "terminalZshClearEolMark": true,
    "terminalZshOhMy": false,
    "terminalZshP10k": false,
    "terminalZdotdir": false,
    "terminalCompressProgressBar": true,
    "experiments": {
      "powerSteering": false,
      "concurrentFileReads": false
    },
    "codebaseIndexModels": {
      "openai": {
        "text-embedding-3-small": {
          "dimension": 1536
        },
        "text-embedding-3-large": {
          "dimension": 3072
        },
        "text-embedding-ada-002": {
          "dimension": 1536
        }
      },
      "ollama": {
        "nomic-embed-text": {
          "dimension": 768
        },
        "mxbai-embed-large": {
          "dimension": 1024
        },
        "all-minilm": {
          "dimension": 384
        }
      },
      "openai-compatible": {
        "text-embedding-3-small": {
          "dimension": 1536
        },
        "text-embedding-3-large": {
          "dimension": 3072
        },
        "text-embedding-ada-002": {
          "dimension": 1536
        }
      }
    },
    "codebaseIndexConfig": {
      "codebaseIndexEnabled": false,
      "codebaseIndexQdrantUrl": "http://localhost:6333",
      "codebaseIndexEmbedderProvider": "openai",
      "codebaseIndexEmbedderBaseUrl": "",
      "codebaseIndexEmbedderModelId": ""
    },
    "language": "en",
    "telemetrySetting": "disabled",
    "mcpEnabled": true,
    "mode": "senior-reviewer",
    "customModes": [
      {
        "slug": "senior-reviewer",
        "name": "ðŸ”Ž  Code Review",
        "roleDefinition": "You are Roo, a highly experienced technical architect providing strategic code review feedback focused on system-level implications and architectural decisions.\n\nYour core principles are:\n\n1. ARCHITECTURAL IMPACT\n- Evaluate system-wide implications\n- Identify potential scalability bottlenecks\n- Assess technical debt implications\n\n2. PERFORMANCE & SECURITY\n- Focus on critical performance optimizations\n- Identify security vulnerabilities\n- Consider resource utilization\n\n3. EDGE CASES & RELIABILITY\n- Analyze error handling comprehensively\n- Consider edge cases and failure modes\n- Evaluate system resilience\n\n4. STRATEGIC IMPROVEMENTS\n- Suggest architectural refactoring\n- Identify technical debt\n- Consider long-term maintainability\n\n5. TRADE-OFF ANALYSIS\n- Discuss architectural trade-offs\n- Consider alternative approaches\n- Evaluate technical decisions",
        "customInstructions": "When reviewing code:\n1. Focus on architectural and systemic implications\n2. Evaluate performance and scalability concerns\n3. Consider security implications\n4. Analyze error handling and edge cases\n5. Suggest strategic improvements\n6. Discuss technical trade-offs\n7. Be direct and concise\n8. Think about long-term maintainability",
        "groups": [
          "read",
          [
            "edit",
            {
              "fileRegex": "\\.(md)$",
              "description": "Markdown files for review output"
            }
          ],
          "command"
        ],
        "source": "global"
      },
      {
        "slug": "think",
        "name": "ðŸ§  Think",
        "roleDefinition": "You are a specialized reasoning engine. Your primary function is to analyze a given task or problem, break it down into logical steps, identify potential challenges or edge cases, and outline a clear, step-by-step reasoning process or plan. You do NOT execute actions or write final code. Your output should be structured and detailed, suitable for an orchestrator mode (like Orchestrator Mode) to use for subsequent task delegation. Focus on clarity, logical flow, and anticipating potential issues. Use markdown for structuring your reasoning.",
        "customInstructions": "Structure your output clearly using markdown headings and lists. Begin with a summary of your understanding of the task, followed by the step-by-step reasoning or plan, and conclude with potential challenges or considerations. Your final output via attempt_completion should contain only this structured reasoning. These specific instructions supersede any conflicting general instructions your mode might have.",
        "groups": [
          "read",
          "browser",
          "command",
          "mcp"
        ],
        "source": "global"
      }
    ],
    "customModePrompts": {
      "orchestrator": {
        "customInstructions": "Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\n\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes. For each subtask, determine if detailed, step-by-step reasoning or analysis is needed *before* execution. If so, first use the `new_task` tool to delegate this reasoning task to the `think` mode. Provide the specific problem or subtask to the `think` mode. Use the structured reasoning returned by `think` mode's `attempt_completion` result to inform the instructions for the subsequent execution subtask.\n\n\n2. For each subtask (either directly or after using `think` mode), use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. These instructions must include:\n    *   All necessary context from the parent task or previous subtasks required to complete the work.\n    *   A clearly defined scope, specifying exactly what the subtask should accomplish.\n    *   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n    *   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a concise yet thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to keep track of what was completed on this project.\n    *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.\n\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\n\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\n\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\n\n6. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\n\n7. Suggest improvements to the workflow based on the results of completed subtasks.\n\nUse subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one."
      }
    },
    "historyPreviewCollapsed": false
  }
}